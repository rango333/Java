// Max Santomauro

// Program purpose: Creating regular queues and priority queues and working with
// queues nested within classes.

// This program involves the use of cargo terminal, cargo plane, semi-truck, 
// taxiways, runway, and air traffic controller classes for the movement 
// of cargo. THis movement of cargo will make use of regular queues, priority
// queues, and the nesting of queues within classes.


import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.PriorityQueue;

public class SantomauroMaxAssignment7 {

	public static void main(String[] args) throws IOException {
		
		// Creates a new File object that represents a file named "FedExTrucks7.txt"
		File truckFile = new File("FedExTrucks7.txt");
		
		// Create a scanner for the FedExTrucks7 file
		Scanner plane = new Scanner(truckFile);

		// Assign the first int value from the FedExTrucks7 file to an int variable
		int planeSize = plane.nextInt();
		
		plane.nextLine(); // Move to the next line after reading the size
		
		// Creates a new File object that represents a file named "FedExPlanes7.txt"
		File planeFile = new File("FedExPlanes7.txt");
		
		// Create a scanner for the FedExPlanes7 file
		Scanner truck = new Scanner(planeFile);

		// Assign the first int value from the FedExPlanes7 file to an int variable
		int truckSize = truck.nextInt();
		
		truck.nextLine(); // Move to the next line after reading the size
		
		// Create a Cargo Terminal object that contains a loading dock and tarmac
		// based on size values from the files. 
		CargoTerminal7 cargoTerminal = new CargoTerminal7(planeSize, truckSize);
		
		// Read trucks from the FedExTrucks7 file
		while(plane.hasNext()) {
			int dock = plane.nextInt();
			int truckNumber = plane.nextInt();
			String destinationCity = plane.nextLine().trim();
			SemiTruck7 semiTruck = new SemiTruck7(truckNumber, destinationCity);
			cargoTerminal.addSemiTruck(dock, semiTruck);	
		}
		
		// Read planes from the FedExTrucks7 file
		while(truck.hasNext()) {
			int stand = truck.nextInt();
			int flightNumber = truck.nextInt();
			int capacity = truck.nextInt();
			String cargo = truck.next();
			String destinationCity = truck.nextLine().trim();
			CargoPlane7 cargoPlane = new CargoPlane7(flightNumber, capacity, cargo, destinationCity);
			cargoTerminal.addCargoPlane(stand, cargoPlane);	
		}
		
		plane.close(); // Close scanner for plane
		truck.close(); // Close scanner for semi-truck		
		
		// Display cargo terminal's loading dock and tarmac
		System.out.println("Loading semi-trucks and planes into cargo terminal...\n");
		cargoTerminal.displayCargoTerminal();
		
		// Display moving plane cargo from tarmac to taxiways
		Taxiways cargoTaxiway = new Taxiways();
		AirTrafficController myController = new AirTrafficController();
		myController.movePlanesToTaxiways(cargoTerminal, cargoTaxiway);
		
		// Display tarmac being empty after moving to taxiways
		System.out.println("\nShow empty tarmac in cargo terminal...\n");
		cargoTerminal.displayCargoTerminal();
		
		// Display moving plane cargo from taxiways to runway
		Runway cargoRunway = new Runway();
		myController.movePlanesToRunway(cargoTaxiway, cargoRunway);
		
		// Display the planes taking off
		myController.clearedForTakeoff(cargoRunway);
	}
}

// Create CargoTerminal7 class
class CargoTerminal7 {
	
	// Create private data field here
	private int numberDocks;
	private int numberStands;
	private SemiTruck7[] loadingDock;
	private CargoPlane7[] tarmac;
	
	// Create constructor here
	public CargoTerminal7 (int numberDocks, int numberStands) {
		
		// Initialize instance variables to incoming values
		this.numberDocks = numberDocks;
        this.numberStands = numberStands;
        
     // Allocates memory to arrays from private data field
        this.loadingDock = new SemiTruck7[numberDocks];
        this.tarmac = new CargoPlane7[numberStands];
        
	}
	
	// Create getters here
	public int getNumberDocks() {
		return numberDocks;
	}
			
	public int getNumberStands() {
		return numberStands;
	}
	
	// Create methods to add trucks and planes to the ArrayLists
	public void addSemiTruck (int dock, SemiTruck7 semiTruck) {
		if (dock >= 0 && dock < numberDocks) {
			loadingDock[dock] = semiTruck;
		}	
	}
	
	public void addCargoPlane (int stand, CargoPlane7 plane) {
		if (stand >= 0 && stand < numberStands) {
			tarmac[stand] = plane;
		}
	}
	
	// Create methods that return the ArrayLists' docks and stands
	public SemiTruck7 getSemiTruck (int dock) {
		if (dock >= 0 && dock < numberDocks) {
			return loadingDock[dock];
		}
		return null;
	}
	
	public CargoPlane7 getCargoPlane (int stand) {
		if (stand >= 0 && stand < numberStands) {
			return tarmac[stand];
		}
		return null;
	}
	
	// Create method for displaying cargo terminal
	public void displayCargoTerminal() {

		for(int i = 0; i < numberDocks; i++ ) {
			System.out.printf("Dock %-9d", i);
		}
		
		System.out.print("\n");
		
		for (int i = 0; i < numberDocks; i++) {
	        if (loadingDock[i] != null) {
	        	System.out.printf("%-14d", loadingDock[i].getTruckNumber());
	        } 
	        else {
	        	System.out.printf("%-14s", "------");
	        }
	    }

		System.out.print("\n\n");
		
		for(int i = 0; i < numberStands; i++ ) {
			System.out.printf("Stand %-8d", i);
		}
		
		System.out.print("\n");
		
		for (int i = 0; i < numberStands; i++) {
	        if (tarmac[i] != null) {
	        	System.out.printf("%-14d", tarmac[i].getFlightNumber());
	        } 
	        else {
	 
	        	System.out.printf("%-14s", "------");
	        }
	    }
		System.out.print("\n\n");	
	}
	
	// Create a method that takes in the number of stands and removes
	// cargo planes stored in tarmac at specific stand.
	public CargoPlane7  removeCargoPlane (int stand) {
		 if (stand >= 0 && stand < tarmac.length) {
	            CargoPlane7 planeLocation = tarmac[stand];
	            
	         // If cargo plane exists, return cargo plane with stand set to null 
	         if (planeLocation != null) {
	             tarmac[stand] = null;
	             return planeLocation;
	         }
		 }
		 // Return null if no cargo plane exists
		 return null;
	}
}

// Create a CargoPlane7 class
class CargoPlane7 implements Comparable<CargoPlane7> {
	
	// Create private data field here
	private int flightNumber;
	private double capacity;
	private String cargoType;
	private String destinationCity;
	
	// Create constructor here
	public CargoPlane7(int flightNumber, double capacity, 
            String cargoType, String destinationCity) {
		
		// Initialize instance variables to incoming values
		this.flightNumber = flightNumber;
		this.capacity = capacity;
		this.cargoType = cargoType;
		this.destinationCity = destinationCity;
	}
	
	// Create a getter for only flightNumber
	public int getFlightNumber() {
		return flightNumber;
	}
	
	// Create a toString method that displays the flight number,
	// destination city, and cargo type
	public String toString() {
		return String.format("%-4d\t\t%-15s\t\t%-10s", 
				flightNumber, 
				destinationCity, 
				cargoType);
	}
	
	// Create a method that compares based on cargo type in this order:
	// military, perishables, and medical respectively
	public int compareTo(CargoPlane7 otherCargoPlane) {
		// Create string array that defines order of cargo type
	    String[] priorityOrder = {"Military", "Perishables", "Medical"};
		
	    // Find the indices for the cargo type in the string array
	    int otherPriority = -1;
	    int thisPriority = -1;
	    
	    for (int i = 0; i < priorityOrder.length; i++) {
	    	if (priorityOrder[i].equals(this.cargoType)) {
	            thisPriority = i;
	        }
	        if (priorityOrder[i].equals(otherCargoPlane.cargoType)) {
	            otherPriority = i;
	        }
	    }
	   
	    // Compare based on priority
	    if (thisPriority < otherPriority) {
	        return -1;
	    } else if (thisPriority > otherPriority) {
	        return 1;
	    } else {
	        return 0;
	    } 
	} // CompareTo
	
	// Create method that returns true if plane’s cargo type
	// is military, perishables, or medical 
	public boolean isPriority() {
		if(cargoType.equals("Military") || cargoType.equals("Perishables")
		   || cargoType.equals("Medical")) {
			return true;
		}
		else {
			return false;
		}
	}
	
	// Create method that returns true if plane’s cargo type
	// is not military, perishables, or medical 
	public boolean isBasic() {
			return !isPriority();
	}
}

// Create a SemiTruck7 class
class SemiTruck7 implements Comparable<SemiTruck7>{
	
	// Create private data field here
	int truckNumber;
	String destinationCity;
	
	// Create constructor here
	public SemiTruck7 (int truckNumber, String destinationCity) {
		
		// Initialize instance variables to incoming values
		this.truckNumber = truckNumber;
		this.destinationCity = destinationCity;
	}
	
	// Create a getters for truckNumber
	public int getTruckNumber() {
		return truckNumber;
	}
	
	// Create a getters for destinationCity
	public String getdestinationCity() {
		return destinationCity;
	}
	
	 @Override
	 public String toString() {
		 String result = String.format("%-16d%s", truckNumber, destinationCity);
	     return result;
	 }
	 
	 // Create a method that sorts the trucks based on destination
	 // This method overrides the compareTo method in Comparable
	 public int compareTo(SemiTruck7 otherSemiTruck) {
		 
		 // Comparing destination city alphabetically using String's compareTo
	     int compareResult = this.destinationCity.compareTo(otherSemiTruck.getdestinationCity());
		 
		 if (compareResult > 0) {
			 return 1;  
		 } 
		 else if (compareResult < 0) {
			 return -1;  
		 } 
		 else {
			 return 0;
		 }
	 }	
}

// Create a class that represents taxiways at the cargo terminal
class Taxiways {
	// Create private data field here
	private PriorityQueue<CargoPlane7> priorityTaxiway; // for cargo types (military, perishables, medical)
	private Queue<CargoPlane7> basicTaxiway; // for cargo types that are not military, perishables or medical
	
	// Create a constructor and allocating memory to both queues
	public Taxiways() {
		priorityTaxiway = new PriorityQueue<>();
		basicTaxiway = new LinkedList<>();
	}

	// Create a method that returns true if priority taxiway is empty and false if not empty
	public boolean isPriorityTaxiwayEmpty() {
		if (priorityTaxiway.isEmpty()) {
	        return true;
	    } else {
	        return false;
	    }
	}
	
	// Create method that offers priority plane to taxiway
	public void addPlaneToPriorityTaxiway(CargoPlane7 value) {
		priorityTaxiway.offer(value);
	}
	
	// Create a method that removes plane from priority taxiway and returns the cargo plane
	public CargoPlane7 removePlaneFromPriorityTaxiway() {
			return priorityTaxiway.remove();		
	}
	
	// Create a method that returns true if basic taxiway is empty and false if not empty
	public boolean isBasicTaxiwayEmpty() {
		if (basicTaxiway.isEmpty()) {
	        return true;
	    } else {
	        return false;
	    }
	}
	
	// Create method that offers basic plane to taxiway
	public void addPlaneToBasicTaxiway(CargoPlane7 value) {
		basicTaxiway.offer(value);
	}
	
	// Create a method that removes plane from basic taxiway and returns the cargo plane
	public CargoPlane7 removePlaneFromBasicTaxiway() {
		return basicTaxiway.remove();		
	}
}

// Create a class that represents the runway at the cargo terminal
class Runway {
	// Create private data field here
	private Queue<CargoPlane7> runway;
	
	// Create a constructor and allocating memory to the queue
	public Runway() {
		runway = new LinkedList<>();
	}
	
	// Create a method that returns true if runway is empty and false if not empty
	public boolean isEmpty() {
		if (runway.isEmpty()) {
			return true;
		} 
		else {
			return false;
		}
	}
	
	// Create method that offers priority plane to runway
	public void addPlaneToRunway(CargoPlane7 value) {
		runway.offer(value);
	}
	
	// Create a method that removes plane from basic taxiway and returns the cargo plane
	public CargoPlane7 removePlaneFromRunway() {
		return runway.remove();		
	}
}

// Create a class that moves cargo planes from the tarmac to taxiways to runway.
class AirTrafficController {
	// Create a method that moves cargo plane from the tarmac to the taxiway
	public void movePlanesToTaxiways (CargoTerminal7 cargoTerminal, Taxiways taxiways) {
		System.out.println("Control Tower: Moving planes from cargo terminal tarmac to taxiways:\n"
			+ "---------------------------------------------------------------------------------");
		// Use a for condition to get the plane at the stand location		
		for(int i = 0; i < cargoTerminal.getNumberStands(); i++) {
	
			CargoPlane7 currentPlane = cargoTerminal.removeCargoPlane(i); // Get the stand at location i
			if(currentPlane != null) {
				if(currentPlane.isPriority()) {
					taxiways.addPlaneToPriorityTaxiway(currentPlane);
					System.out.println("Moved to taxiway Priority flight " + currentPlane.toString());
				}
				else {
					taxiways.addPlaneToBasicTaxiway(currentPlane);
					System.out.println("Moved to taxiway Basic    flight " + currentPlane.toString());
				} 
			} // Plane not null
		}	
	}
	
	// Create a method that moves cargo plane from the taxiway to the runway
	public void movePlanesToRunway (Taxiways taxiways, Runway runway) {
		
		
		System.out.println("Control Tower: Moving cargo planes from taxiways to runway\r\n"
				+ "--------------------------------------------------------------------");
		
		// Remove cargo planes from the Taxiway, add the the runway, and print out out a message for
		// each cargo plane along with the flight number, destination city, and cargo type
		
		// First, move cargo planes based on priority
		while (!taxiways.isPriorityTaxiwayEmpty()) {
			CargoPlane7 removeTaxiway = taxiways.removePlaneFromPriorityTaxiway();
			runway.addPlaneToRunway(removeTaxiway);
			System.out.println("Moved to runway flight " + removeTaxiway.toString());
				
		}
		
		// Second, move the rest of the cargo planes that are not priority
		while (!taxiways.isBasicTaxiwayEmpty()) {
			CargoPlane7 removeTaxiway = taxiways.removePlaneFromBasicTaxiway();
			runway.addPlaneToRunway(removeTaxiway);
			System.out.println("Moved to runway flight " + removeTaxiway.toString());
				
		}	
	}
	
	// Create a method that simulates the planes taking off
	public void clearedForTakeoff (Runway runway)  {
		System.out.println("\nControl Tower: Ready for takeoff!\n"
				+ "--------------------------------------------------------------------");
		// Remove cargo planes from the runway and print out a message for each cargo plane along
		// with the flight number, destination city, and cargo type
		while (!runway.isEmpty()) {
			CargoPlane7 flyingPlane = runway.removePlaneFromRunway();
			System.out.println("Cleared for takeoff flight " + flyingPlane.toString());
		}	
	}
}

/* --------------------------------------  OUTPUT------------------------------------------
 * Loading semi-trucks and planes into cargo terminal...

Dock 0        Dock 1        Dock 2        Dock 3        Dock 4        
688           820           ------        ------        728           

Stand 0       Stand 1       Stand 2       Stand 3       Stand 4       Stand 5       Stand 6       Stand 7       Stand 8       Stand 9       
245           194           ------        ------        817           ------        122           ------        330           625           

Control Tower: Moving planes from cargo terminal tarmac to taxiways:
---------------------------------------------------------------------------------
Moved to taxiway Priority flight 245 		Paris          		Medical   
Moved to taxiway Priority flight 194 		Yokota         		Military  
Moved to taxiway Basic    flight 817 		Jackson        		Water     
Moved to taxiway Priority flight 122 		Los Angeles    		Perishables
Moved to taxiway Basic    flight 330 		Zurich         		Packages  
Moved to taxiway Priority flight 625 		Stuttgart      		Military  

Show empty tarmac in cargo terminal...

Dock 0        Dock 1        Dock 2        Dock 3        Dock 4        
688           820           ------        ------        728           

Stand 0       Stand 1       Stand 2       Stand 3       Stand 4       Stand 5       Stand 6       Stand 7       Stand 8       Stand 9       
------        ------        ------        ------        ------        ------        ------        ------        ------        ------        

Control Tower: Moving cargo planes from taxiways to runway
--------------------------------------------------------------------
Moved to runway flight 194 		Yokota         		Military  
Moved to runway flight 625 		Stuttgart      		Military  
Moved to runway flight 122 		Los Angeles    		Perishables
Moved to runway flight 245 		Paris          		Medical   
Moved to runway flight 817 		Jackson        		Water     
Moved to runway flight 330 		Zurich         		Packages  

Control Tower: Ready for takeoff!
--------------------------------------------------------------------
Cleared for takeoff flight 194 		Yokota         		Military  
Cleared for takeoff flight 625 		Stuttgart      		Military  
Cleared for takeoff flight 122 		Los Angeles    		Perishables
Cleared for takeoff flight 245 		Paris          		Medical   
Cleared for takeoff flight 817 		Jackson        		Water     
Cleared for takeoff flight 330 		Zurich         		Packages*/
