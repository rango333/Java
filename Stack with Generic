// Max Santomauro

/* This project involves the implementation of Java's predefined JCF stack class
 * and a created generic class along with its own methods. The first part 
 * involves replacing all zeroes of array of integer values and the second part
 * involves manually sorting two unsorted stacks and merging them into one
 * sorted stacked based on values from files.
*/

import java.io.File;
import java.util.ArrayList;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;

public class SantomauroMaxAssignment5 {

	public static void main(String[] args) throws IOException {
		// ------------------PART 1------------------
		
		// Create an integer array with values that include 0s.
		int[] numbers = {0, 0, 4, 3, 0, 0, 2, 1, 0, 0};
		
		// Create a stack to store integers.
        Stack<Integer> stack = new Stack<>();
        
        // Fill the stack ArrayList with the values
        for(int i = 0; i < numbers.length; i++) {
        	stack.add(numbers[i]);
        }
        
        // Call replaceZerosWithTen method and run stack through it.
        replaceZerosWithTen(stack);

        // Call the non-generic printStack method and run stack through it.
        System.out.println("Stack Values After 0's Replaced with 10\r\n"
        		+ "----------------------------------------------");
        printStack(stack);
        
        // ------------------PART 2------------------
        
        // Create new File objects that represent files named "integers1.txt",
        // "integers2.txt", "strings1.txt", and "strings2.txt".
     	File integers1File = new File("integers1.txt");
     	File integers2File = new File("integers2.txt");
     	File strings1File = new File("strings1.txt");
     	File strings2File = new File("strings2.txt");
     	
     	// Create a scanner for each file
     	Scanner integersFile1 = new Scanner(integers1File);
     	Scanner integersFile2 = new Scanner(integers2File);
     	Scanner stringsFile1 = new Scanner(strings1File);
     	Scanner stringsFile2 = new Scanner(strings2File);
     	
     	// Create seperate GenerickStack objects that hold the objects from the files.
     	GenericStack<Integer> integers1 = new GenericStack<>();
     	GenericStack<Integer> integers2 = new GenericStack<>();
     	GenericStack<String> strings1 = new GenericStack<>();
     	GenericStack<String> strings2 = new GenericStack<>();
     	
     	// Fill the GenericStack objects with the elements.
        while(integersFile1.hasNext()) {
			int number = integersFile1.nextInt();
			integers1.push(number);	
		}
        while(integersFile2.hasNext()) {
			int number = integersFile2.nextInt();
			integers2.push(number);	
		}
        while(stringsFile1.hasNext()) {
			String string = stringsFile1.next();
			strings1.push(string);	
		}
        while(stringsFile2.hasNext()) {
			String string = stringsFile2.next();
			strings2.push(string);	
		}
        
        // ----------------------INTEGER VALUES----------------------
        
        // Call the generic printStack method, run the integers1 and integers2
        // GenericStack objects through it, and display the values for both.
        System.out.println("\nInteger1 Stack: filled with values from file: integers1.txt\r\n"
        		+ "---------------------------------------------------------");
        printStack(integers1);
        
        System.out.println("\nInteger2 Stack: filled with values from file: integers2.txt\r\n"
        		+ "----------------------------------------------------------");
        printStack(integers2);      
     	
        // Call the sortStack method to sort both integers1 and integers2
        sortStack(integers1);
        sortStack(integers2);
        
        // Call the generic printStack method, run the integers1 and integers2 
        // GenericStack objects through it, and display the descending values for both.
        System.out.println("\nInteger1 Stack: sorted largest to smallest\r\n"
        		+ "----------------------------------------------------------");
        printStack(integers1);
        
        System.out.println("\nInteger2 Stack: sorted largest to smallest\r\n"
        		+ "----------------------------------------------------------");
        printStack(integers2);
        
        // Assign the mergeStacks method to merge both integer1 and integer2 to a GenerickStack
        // object that holds both integers1 and integers2 objects.
        GenericStack<Integer> mergedStack1 = mergeStacks(integers1, integers2);
        
        // Call the generic printStack method, run the integers1 and integers2 GenericStack objects
        // through it, and display the merged values in ascending order. 
        System.out.println("\nMerged Stack: sorted smallest to largest: \r\n" 
        		+ "----------------------------------------------------------");
        printStack(mergedStack1);
        
        // ----------------------STRING VALUES----------------------
        
        // Call the generic printStack method, run the strings1 and strings2
        // GenericStack objects through it, and display the values for both.
        System.out.println("\nString1 Stack: filled with values from file: strings1.txt\r\n"
        		+ "----------------------------------------------------------");
        printStack(strings1);
        
        System.out.println("\nString2 Stack: filled with values from file: strings2.txt\r\n"
        		+ "----------------------------------------------------------");
        printStack(strings2);
        
        // Call the sortStack method to sort both strings1 and strings2
        sortStack(strings1);
        sortStack(strings2);
        
        // Call the generic printStack method, run the integers1 and integers2
        // GenericStack objects through it, and display the descending values for both.
        System.out.println("\nString1 Stack: sorted in reverse alphabetical\r\n"
        		+ "----------------------------------------------------------");
        printStack(strings1);
        
        System.out.println("\nString2 Stack: sorted in reverse alphabetical\r\n"
        		+ "----------------------------------------------------------");
        printStack(strings2);
        
        // Assign the mergeStacks method to merge both strings1 and strings2 to a GenerickStack
        // object that holds both strings1 and strings2 objects.
        GenericStack<String> mergedStack2 = mergeStacks(strings1, strings2);
        
        // Call the generic printStack method, run the strings1 and strings2 GenericStack objects
        // through it, and display the merged values in ascending order.
        System.out.println("\nMerged Stack: alphabetical\r\n" 
        		+ "----------------------------------------------------------");
        printStack(mergedStack2);
        
     	// Close the files
     	integersFile1.close();
     	integersFile2.close();
     	stringsFile1.close();
     	stringsFile2.close();
	}
	
	// Create a method that replaces the 0 with the value 10.
	public static void replaceZerosWithTen(Stack<Integer> stack) {
		// Create a stack to store integers
		Stack<Integer> stacks = new Stack<>();
        
        // Process each element in the original stack.
        while (!stack.isEmpty()) {
            Integer number = stack.pop();
            if (number == 0) {
                stacks.push(10);
            } else {
                // Push the current element to the number stack.
                stacks.push(number);
            }
        }
        
        // Restore to original stack.
        while (!stacks.isEmpty()) {
        	Integer number = stacks.pop();
            stack.push(number);
        }      
    }
	
	// Create a non-generic method that displays stack in original state.
	public static void printStack(Stack<Integer> stack) {
		// Create a stack to store integers.
		Stack<Integer> stacks = new Stack<>();
		
		// Process each element in the original stack and print.
        while (!stack.isEmpty()) {
            Integer number = stack.pop();
            // Push the current element to the number stack.
            stacks.push(number);
            System.out.println(number);
        }
		
		// Print the original stack with 0s replaced with 10s
		
		for (int i = 0; i < stack.size(); i++) {
			Integer result = stack.get(i);
			System.out.println(result);
		}	
	}
	
	// Create a generic printStack method for displaying the file values
	public static <E> void printStack (GenericStack<E> stack) {
		// Create a stack to store integers
		GenericStack<E> stacks = new GenericStack<>();
		
		// Process each element in the original stack.
        while (!stack.isEmpty()) {
            E value = stack.pop();
            // Push the current element to the number stack.
            stacks.push(value); 
        }
        
        // Restore to original stack and print.
        while (!stacks.isEmpty()) {
        	E value = stacks.pop();
            stack.push(value);
            System.out.println(value);
        }
	}
	
	// Create a generic method for sorting the file values from largest to smallest.
	public static <E extends Comparable<E>> void sortStack(GenericStack<E> aStack) {
		// Create a stack to store integers
		GenericStack<E> stacks = new GenericStack<>();
		
		 // Process each element in the original stack.
        while (!aStack.isEmpty()) {
            E temp = aStack.pop();

            // Place values in descending order
            while (!stacks.isEmpty() && stacks.peek().compareTo(temp) > 0) {
            	E value = stacks.pop();
                aStack.push(value);
            }

            // Push the element to the sorted stack
            stacks.push(temp);
        }

     // Restore to original stack
        while (!stacks.isEmpty()) {
        	E value = stacks.pop();
            aStack.push(value);
        }
	}
	
	// Create a generic method for the purpose of merging the file values
	public static <E extends Comparable<E>> GenericStack<E> mergeStacks 
	 			        (GenericStack<E> stack1, GenericStack<E> stack2) {
		GenericStack<E> mergedStack = new GenericStack<>();
		
		 // Process each element in the original stack.
        while (!stack1.isEmpty() && !stack2.isEmpty()) {
        	E value1 = stack1.pop();
        	E value2 = stack2.pop();
            if (value1.compareTo(value2) < 0) {
            	mergedStack.push(value1);
            	stack2.push(value2);
            }
            else {
            	mergedStack.push(value2);
            	stack1.push(value1);
            }
        }
        
        // Push remaining elements
        while (!stack1.isEmpty()) {
            mergedStack.push(stack1.pop());
        }
        while (!stack2.isEmpty()) {
            mergedStack.push(stack2.pop());
        }  
        
        // Return values
        return mergedStack;
	}
}

// Create a generic stack class called GenericStack that will have a LIFO behavior.
class GenericStack <E> {
	// Intialize private field here.
	private ArrayList<E> stack;
	
	// Create constructor for GenericStack.
    public GenericStack() {
    	// Create an empty stack by allocating memory to ArrayList.
        stack = new ArrayList<>();
    }
    
    // Create a public method to indicate if the stack is currently empty.
    public boolean isEmpty() {
    	return stack.isEmpty();
    }
    
    // Create a public method that returns the number of objects on the stack.
    public int getSize() {
    	return stack.size();
    }
    
    // Create a public method that returns the object at the top of the stack, but doesn't remove it.
    public E peek() {
    	return stack.get(stack.size() - 1);
    }
    
    // Create a public method that removes the top of the stack.
    public E pop() {
    	return stack.remove(stack.size() - 1);
    }
    
    // Create a public method that adds an object to the top of the stack.
    public void push(E value) {
    	stack.add(value);
    }  
}

/* --------------------------------------  OUTPUT------------------------------------------
Stack Values After 0's Replaced with 10
----------------------------------------------
10
10
1
2
10
10
3
4
10
10

Integer1 Stack: filled with values from file: integers1.txt
---------------------------------------------------------
26
81
22
45

Integer2 Stack: filled with values from file: integers2.txt
----------------------------------------------------------
20
9
33
21
30
48
68

Integer1 Stack: sorted largest to smallest
----------------------------------------------------------
81
45
26
22

Integer2 Stack: sorted largest to smallest
----------------------------------------------------------
68
48
33
30
21
20
9

Merged Stack: sorted smallest to largest: 
----------------------------------------------------------
9
20
21
22
26
30
33
45
48
68
81

String1 Stack: filled with values from file: strings1.txt
----------------------------------------------------------
Dopey
Sleepy
Grumpy
Bashful
Happy
Sneezy
Doc

String2 Stack: filled with values from file: strings2.txt
----------------------------------------------------------
Saturn
Earth
Venus
Mars

String1 Stack: sorted in reverse alphabetical
----------------------------------------------------------
Sneezy
Sleepy
Happy
Grumpy
Dopey
Doc
Bashful

String2 Stack: sorted in reverse alphabetical
----------------------------------------------------------
Venus
Saturn
Mars
Earth

Merged Stack: alphabetical
----------------------------------------------------------
Bashful
Doc
Dopey
Earth
Grumpy
Happy
Mars
Saturn
Sleepy
Sneezy
Venus*/
