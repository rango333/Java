// Max Santomauro
   
/* This project involves the use of Javaâ€™s Comparable interface, working with
 * a not completely full array, and ArrayList manipulation. This is
 * exemplified by creating a cargo terminal program that consists of a loading
 * dock for loading and unloading cargo with semi-trucks, a tarmac for
 * unloading and loading cargo that accommodates aircrafts, and a stand area
 * where a plane is parked for unloading and loading.
*/

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class SantomauroMaxAssignment4 {

	public static void main(String[] args) throws IOException {
		
		// Creates a new File object that represents a file named "FedExTrucks.txt"
		File truckFile = new File("FedExTrucks.txt");
		
		// Create a scanner for the FedExTrucks file
		Scanner file1 = new Scanner(truckFile);

		// Assign the first int value from the FedExTrucks file to an int variable
		int size1 = file1.nextInt();
		
		file1.nextLine(); // Move to the next line after reading the size
		
		// Creates a new File object that represents a file named "FedExPlanes.txt"
		File planeFile = new File("FedExPlanes.txt");
		
		// Create a scanner for the FedExPlanes file
		Scanner file2 = new Scanner(planeFile);

		// Assign the first int value from the FedExPlanes file to an int variable
		int size2 = file2.nextInt();
		
		file2.nextLine(); // Move to the next line after reading the size
		
		// Create a Cargo Terminal object that contains a loading dock and tarmac
		// based on size values from the files. 
		CargoTerminal cargoTerminal = new CargoTerminal(size1, size2);
		
		// Read trucks from the FedExTrucks file
		while(file1.hasNext()) {
			int dock = file1.nextInt();
			int truckNumber = file1.nextInt();
			String destinationCity = file1.nextLine().trim();
			SemiTruck semiTruck = new SemiTruck(truckNumber, destinationCity);
			cargoTerminal.addSemiTruck(dock, semiTruck);	
		}
		
		// Read planes from the FedExTrucks file
		while(file2.hasNext()) {
			int stand = file2.nextInt();
			int flightNumber = file2.nextInt();
			int capacity = file2.nextInt();
			String cargo = file2.next();
			String destinationCity = file2.nextLine().trim();
			CargoPlane cargoPlane = new CargoPlane(flightNumber, capacity, cargo, destinationCity);
			cargoTerminal.addCargoPlane(stand, cargoPlane);	
		}
		
		file1.close();
		file2.close();		
		
		// Call the displayCargoTerminal method to display the loading dock and tarmac.
		cargoTerminal.displayCargoTerminal();
		
		// Call the printTerminalStatus method, run the cargoTerminal in it.
		printTerminalStatus(cargoTerminal);	
	}
	
	// Create method that can be called into main and displays truck number and
	// destination by sorted destination city and plane number, destination,
	// cargo type, and capacity by sorted capacity.
	public static void printTerminalStatus(CargoTerminal terminal) {
		// Create two ArrayLists that take in semi-truck and plane objects
		ArrayList<SemiTruck> semiTrucks = new ArrayList<>();
		ArrayList<CargoPlane> cargoPlanes = new ArrayList<>();
		
		// Add truck
		for(int i = 0; i < terminal.getNumberDocks(); i++) {
			SemiTruck semiTruck = terminal.getSemiTruck(i);
			if (semiTruck != null) {
				semiTrucks.add(semiTruck);
			}
		}
		
		// Add plane
		for(int i = 0; i < terminal.getNumberStands(); i++) {
			CargoPlane cargoPlane = terminal.getCargoPlane(i);
			if (cargoPlane != null) {
				cargoPlanes.add(cargoPlane);
			}
		}
		
		// Print each truck number and the destination.
		System.out.println("Truck #		Destination City\r\n"
		+ "----------------------------------------------------------------------------------");
		
		// Sort trucks by destination
		Collections.sort(semiTrucks);
		
		for( int i = 0; i < semiTrucks.size(); i++) {
			System.out.println(semiTrucks.get(i));
		}
		
		// Print the each plane number, destination, cargo, and capacity
		System.out.println("\n\n**********************************************************************************\r\n"
				+ "				Tarmac Status\r\n"
				+ "			(Lowest to Highest Capacity)\r\n"
				+ "**********************************************************************************\r\n"
				+ "Flight		Departing To		Cargo		Capacity(lbs)\r\n"
				+ "----------------------------------------------------------------------------------\r\n");
		
		// Sort planes based on capacity
		Collections.sort(cargoPlanes);

		for( int i = 0; i < cargoPlanes.size(); i++) {
			System.out.println(cargoPlanes.get(i));
		}
	}
}

// Create CargoTerminal class
class CargoTerminal {
	
	// Create private data field here
	private int numberDocks;
	private int numberStands;
	private SemiTruck[] loadingDock;
	private CargoPlane[] tarmac;
	
	// Create constructor here
	public CargoTerminal (int numberDocks, int numberStands) {
		
		// Initialize instance variables to incoming values
		this.numberDocks = numberDocks;
        this.numberStands = numberStands;
        
     // Allocates memory to arrays from private data field
        this.loadingDock = new SemiTruck[numberDocks];
        this.tarmac = new CargoPlane[numberStands];
        
	}
	
	// Create getters here
	public int getNumberDocks() {
		return numberDocks;
	}
			
	public int getNumberStands() {
		return numberStands;
	}
	
	// Create methods to add trucks and planes to the ArrayLists
	public void addSemiTruck (int dock, SemiTruck semiTruck) {
		if (dock >= 0 && dock < numberDocks) {
			loadingDock[dock] = semiTruck;
		}	
	}
	
	public void addCargoPlane (int stand, CargoPlane plane) {
		if (stand >= 0 && stand < numberStands) {
			tarmac[stand] = plane;
		}
	}
	
	// Create methods that return the ArrayLists' docks and stands
	public SemiTruck getSemiTruck (int dock) {
		if (dock >= 0 && dock < numberDocks) {
			return loadingDock[dock];
		}
		return null;
	}
	
	public CargoPlane getCargoPlane (int stand) {
		if (stand >= 0 && stand < numberStands) {
			return tarmac[stand];
		}
		return null;
	}
	
	public void displayCargoTerminal() {
		// Display cargo terminal's loading dock and tarmac
		System.out.println("Loading semi-trucks and planes into cargo terminal...\n");
		
		for(int i = 0; i < numberDocks; i++ ) {
			System.out.printf("Dock %-9d", i);
		}
		
		System.out.print("\n");
		
		for (int i = 0; i < numberDocks; i++) {
			
	        if (loadingDock[i] != null) {
	        	System.out.printf("%-14d", loadingDock[i].getTruckNumber());
	        } 
	        else {
	        	System.out.printf("%-14s", "------");
	        }
	    }

		System.out.print("\n\n");
		
		for(int i = 0; i < numberStands; i++ ) {
			System.out.printf("Stand %-8d", i);
		}
		
		System.out.print("\n");
		
		for (int i = 0; i < numberStands; i++) {
			
	        if (tarmac[i] != null) {
	        	System.out.printf("%-14d", tarmac[i].getFlightNumber());
	        } 
	        else {
	 
	        	System.out.printf("%-14s", "------");
	        }
	    }
		System.out.print("\n\n");
	}
}

// Create a CargoPlane class
class CargoPlane implements Comparable<CargoPlane> {
	
	// Create private data field here
	private int flightNumber;
	private double capacity;
	private String cargoType;
	private String destinationCity;
	
	// Create constructor here
	public CargoPlane(int flightNumber, double capacity, 
            String cargoType, String destinationCity) {
		
		// Initialize instance variables to incoming values
		this.flightNumber = flightNumber;
		this.capacity = capacity;
		this.cargoType = cargoType;
		this.destinationCity = destinationCity;
	}
	
	// Create a getter for only flightNumber
	public int getFlightNumber() {
		return flightNumber;
	}
	
	public String toString() {
		return String.format("%-4d\t\t%-15s\t\t%-10s\t%.2f", 
				flightNumber, 
				destinationCity, 
				cargoType, 
				capacity);
	}
	
	// Create a method that sorts the planes based on capacity
	// This method overrides the compareTo method in Comparable
	public int compareTo(CargoPlane otherCargoPlane) {
		// Sort by comparing current object (this) with other cargo object
		// Do this by returning 1, 0, or -1
		if (this.capacity < otherCargoPlane.capacity) {
			return -1;
		}
		else if (this.capacity > otherCargoPlane.capacity) {
			return 1;
		}
		else {
			return 0;
		} // CompareTo
	}	
}

// Create a SemiTruck class
class SemiTruck implements Comparable<SemiTruck>{
	
	// Create private data field here
	int truckNumber;
	String destinationCity;
	
	// Create constructor here
	public SemiTruck (int truckNumber, String destinationCity) {
		
		// Initialize instance variables to incoming values
		this.truckNumber = truckNumber;
		this.destinationCity = destinationCity;
	}
	
	// Create a getters for truckNumber
	public int getTruckNumber() {
		return truckNumber;
	}
	
	// Create a getters for destinationCity
	public String getdestinationCity() {
		return destinationCity;
	}
	
	 @Override
	 public String toString() {
		 String result = String.format("%-16d%s", truckNumber, destinationCity);
	     return result;
	 }
	 
	 // Create a method that sorts the trucks based on destination
	 // This method overrides the compareTo method in Comparable
	 public int compareTo(SemiTruck otherSemiTruck) {
		 
		 // Comparing destination city alphabetically using String's compareTo
	     int compareResult = this.destinationCity.compareTo(otherSemiTruck.getdestinationCity());
		 
		 if (compareResult > 0) {
			 return 1;  
		 } 
		 else if (compareResult < 0) {
			 return -1;  
		 } 
		 else {
			 return 0;
		 }
	 }	
}

/* --------------------------------------  OUTPUT------------------------------------------
 * Loading semi-trucks and planes into cargo terminal...

Dock 0        Dock 1        Dock 2        Dock 3        Dock 4        
688           820           ------        ------        728           

Stand 0       Stand 1       Stand 2       Stand 3       Stand 4       Stand 5       
245           ------        ------        122           817           ------        

Truck #		Destination City
----------------------------------------------------------------------------------
728             Dallas
820             Denver
688             Memphis


**********************************************************************************
				Tarmac Status
			(Lowest to Highest Capacity)
**********************************************************************************
Flight		Departing To		Cargo		Capacity(lbs)
----------------------------------------------------------------------------------

245 		Kyiv           		Medical   	100000.00
122 		Zurich         		Perishables	180000.00
817 		Jackson        		Water     	230000.00
 */
