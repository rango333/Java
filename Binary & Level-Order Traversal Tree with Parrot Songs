// Max Santomauro

/* Purpose: This project involves implementing a binary search tree and to a level-order
 * traversal of the tree.  The tree will be filled with parrots and when a level order traversal
 * is performed the parrots will sing a song.  
 * 
 * The program has a Parrot class, a Binary Tree class, and a Tree Node class within the
 * Binary Tree class.
 */

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class SantomauroMaxAssignment10 {

	public static void main(String[] args) throws IOException {

		// Name the files and read them
		final String PARROTS_FILE_NAME = "parrots.txt";
		final String PARROTS_TEST_FILE_NAME = "parrotsTest.txt";

		// Setup a file reference variable to refer to text file
		File parrotsTestFileName = new File(PARROTS_TEST_FILE_NAME);
		File parrotsFileName = new File(PARROTS_FILE_NAME);
		

		// Open the parrots file for reading by creating a scanner for the file
		Scanner parrotsFile = new Scanner(parrotsFileName);

		// Open the parrotsTest file for reading by creating a scanner for the file
		Scanner parrotsTestFile = new Scanner(parrotsTestFileName);

		// Create instance object of BinaryTree to store parrots from the parrotsTest.txt file
		BinaryTree parrotsTest = new BinaryTree();

		// Read parrots from the parrotsTest.txt file
		while (parrotsTestFile.hasNext()) {
			int id = parrotsTestFile.nextInt();
			String name = parrotsTestFile.next();
			String songWord = parrotsTestFile.next().trim();
			parrotsTest.insert(new Parrot(id, name, songWord));
		}
		parrotsTestFile.close();
		
		// Call the levelOrder method to display the parrot songs
		System.out.println("Parrot's Song\r\n" + "-------------------------------");
		parrotsTest.levelOrder();
		
		// Call the visitLeaves method to display the parrot names
		System.out.println("\n\nParrots on Leave Nodes\r\n" + "----------------------");
		parrotsTest.visitLeaves();

		// Create instance object of BinaryTree to store parrots values in from the parrots.txt file
		BinaryTree parrots = new BinaryTree();

		// Read parrots from the parrots.txt file
		while (parrotsFile.hasNext()) {
			int id = parrotsFile.nextInt();
			String name = parrotsFile.next();
			String songWord = parrotsFile.next().trim();
			parrots.insert(new Parrot(id, name, songWord));
		}

		parrotsFile.close();
		
		// Call the levelOrder method to display the parrot songs
		System.out.println("\nParrot's Song\r\n" + "-------------------------------");
		parrots.levelOrder();

		// Call the visitLeaves method to display the parrot names
		System.out.println("\n\nParrots on Leave Nodes\r\n" + "----------------------");
		parrots.visitLeaves();
	}
}

// Create a Parrot class that represents one parrot and emplements Comparable<Parrot>
class Parrot implements Comparable<Parrot> {

	// Create private date field here
	private int id;
	private String name = "";
	private String songWord = "";

	// Create constructor and initialize all private data fields with incoming
	// values
	// read from the file.
	public Parrot(int id, String name, String songWord) {
		this.id = id;
		this.name = name;
		this.songWord = songWord;
	}

	// Create getters for name and songWord
	public String getName() {
		return name;
	}

	public String sing() {
		return songWord;
	}

	// Create a compareTo method that compares parrots with their id's
	public int compareTo(Parrot otherParrot) {
		if (this.id < otherParrot.id) {
			return -1;
		} else if (this.id > otherParrot.id) {
			return 1;
		} else {
			return 0;
		}
	}
}

// Create a binary tree class to store elements in hierarchy
class BinaryTree {

	// Create private date field here
	private TreeNode root;

	// Create a constructor and set private field variable root to null
	public BinaryTree() {
		root = null;
	}

	// Create boolean method for adding new nodes (data values) to the tree
	// while maintaining the tree's structure
	public boolean insert(Parrot parrotToAdd) {

		TreeNode parent = null;
		TreeNode current = root;
		
		// Create an instance of TreeNode and insert a new Node
		TreeNode newNode = new TreeNode(parrotToAdd);

		if (root == null) {
			root = newNode; // tree was empty
		} else {
			// Transverse the tree to find the insertion point
			while (current != null) {
				int compare = parrotToAdd.compareTo(current.value);

				if (compare < 0) {
					parent = current;
					current = current.left;
				} else if (compare > 0) {
					parent = current;
					current = current.right;
				} else {
					return false;
				}
			}
			
			int compare = parrotToAdd.compareTo(parent.value);
			
			if (compare < 0) {
				parent.left = newNode;
			} else {
				parent.right = newNode;
			}
		}
		return true;
	}

	// Create a method to do a level-order traversal of the tree
	public void levelOrder() {
		if (root == null) {
			return;
		}

		// Create Queue to keep track of the nodes in the next level down.
		Queue<TreeNode> queue = new LinkedList<>();
		queue.offer(root); // Add root to queue

		while (!queue.isEmpty()) {
			// Pull the next node off the queue, save in a temporary node
			TreeNode tempNode = queue.remove();
			System.out.print(tempNode.value.sing() + " "); // Print parrot word in song

			// Add tempNodeâ€™s left and right children to the queue, left 1st
			if (tempNode.left != null) {
				queue.offer(tempNode.left);
			}
			if (tempNode.right != null) {
				queue.offer(tempNode.right);
			}
		}
	}

	// Create a public void method that calls the private recursive method
	// visitLeaves
	// Used to call into main since main because main does not have access to the
	// root
	public void visitLeaves() {
		visitLeaves(root); // Call private recursive method of visitLeaves
	}

	// Create private void method for visiting leaf nodes in left to right order
	// using recursive method
	private void visitLeaves(TreeNode aNode) {
		if (aNode == null) {
			return;
		}

		// Check if the current node is a leaf and print parrot name
		if (aNode.left == null && aNode.right == null) {
			System.out.println(aNode.value.getName());
		}

		// // Recursively visit the left subtree and then right subtree
		visitLeaves(aNode.left);
		visitLeaves(aNode.right);
	}

	// Create a private inner class tree node that represents one node in the binary
	// search tree.
	private class TreeNode {
		Parrot value;
		TreeNode left;
		TreeNode right;

		// Create a constructor and initialize variable value to itself and the
		// left and right variables to null
		TreeNode(Parrot value) {
			this.value = value;
			this.left = null;
			this.right = null;
		}
	}
}

/* --------------------------------------  OUTPUT------------------------------------------
 * Parrot's Song
-------------------------------
Oh beautiful for spacious skies 

Parrots on Leave Nodes
----------------------
Tweety
Love
Pollymorphic

Parrot's Song
-------------------------------
School's out for summer! No more pencils, no more books, no more crazy design notebooks! Have a great summer, we'll see you in Fall! 

Parrots on Leave Nodes
----------------------
Molly
Love
Pollymorphic
Coco
Cutie
Grace
Yakky
Nutty
Jam
Rocky
Yeti
*/
